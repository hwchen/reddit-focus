{"kind": "Listing", "data": {"after": "t3_85cvn7", "dist": 25, "modhash": "", "whitelist_status": "all_ads", "children": [{"kind": "t3", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "rust", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85oltc", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "kibwen", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 3, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "users.rust-lang.org", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_85oltc", "spoiler": false, "permalink": "/r/rust/comments/85oltc/announcing_rust_latam_a_rust_conference_for_latin/", "subreddit_type": "public", "locked": false, "hide_score": true, "created": 1521534984.0, "url": "https://users.rust-lang.org/t/rust-latam-conference-wg/16294", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 35351, "created_utc": 1521506184.0, "subreddit_name_prefixed": "r/rust", "ups": 3, "media": null, "num_comments": 0, "title": "Announcing Rust Latam, a Rust conference for Latin America (Montevideo, Uruguay on March 2019)", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "rust", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I originally created &lt;code&gt;derive_more&lt;/code&gt; two years ago, because I wanted to be able to easily add/subsract my newtype structs that wrapped numbers. To do this I had to Implement &lt;code&gt;Add&lt;/code&gt; and &lt;code&gt;Sub&lt;/code&gt; manually even though their implementation was trivial. By now it&amp;#39;s grown to include support for a big part of the traits from the standard library and handles a lot of edge cases. This release adds support for &lt;code&gt;Index&lt;/code&gt;, &lt;code&gt;IndexMut&lt;/code&gt; and &lt;code&gt;Display&lt;/code&gt; and it&amp;#39;s friends such as &lt;code&gt;Binary&lt;/code&gt;. It also adds support for cross crate inlining by setting the &lt;code&gt;#[inline]&lt;/code&gt; attribute on all derived methods.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/JelteF/derive_more\"&gt;Github&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/JelteF/derive_more/blob/master/CHANGELOG.md\"&gt;Changelog&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://jeltef.github.io/derive_more/derive_more/\"&gt;Docs&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://crates.io/crates/derive_more\"&gt;Crates.io&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I originally created `derive_more` two years ago, because I wanted to be able to easily add/subsract my newtype structs that wrapped numbers. To do this I had to Implement `Add` and `Sub` manually even though their implementation was trivial. By now it's grown to include support for a big part of the traits from the standard library and handles a lot of edge cases. This release adds support for `Index`, `IndexMut` and `Display` and it's friends such as `Binary`. It also adds support for cross crate inlining by setting the `#[inline]` attribute on all derived methods.\n\n- [Github](https://github.com/JelteF/derive_more)\n- [Changelog](https://github.com/JelteF/derive_more/blob/master/CHANGELOG.md)\n- [Docs](https://jeltef.github.io/derive_more/derive_more/)\n- [Crates.io](https://crates.io/crates/derive_more)", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85nok1", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "Jelterminator", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 15, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.rust", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": true, "parent_whitelist_status": "all_ads", "name": "t3_85nok1", "spoiler": false, "permalink": "/r/rust/comments/85nok1/derive_more_090_released_now_supports_deriving/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521527272.0, "url": "https://www.reddit.com/r/rust/comments/85nok1/derive_more_090_released_now_supports_deriving/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 35351, "created_utc": 1521498472.0, "subreddit_name_prefixed": "r/rust", "ups": 15, "media": null, "num_comments": 0, "title": "derive_more 0.9.0 released: Now supports deriving Index, IndexMut and Display and its friends", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "rust", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;This seems like a specific question, but it&amp;#39;s an example of code I run into a lot.&lt;/p&gt;\n\n&lt;p&gt;Here, I implement a function &lt;code&gt;append_header_vary(&amp;amp;mut response, &amp;quot;Origin&amp;quot;)&lt;/code&gt; that sets the response&amp;#39;s Vary header to &amp;quot;Origin&amp;quot; if it doesn&amp;#39;t exist. Else, it appends &amp;quot;Origin&amp;quot; to the Vary header&amp;#39;s array.&lt;/p&gt;\n\n&lt;p&gt;This demo is runnable: &lt;a href=\"https://play.rust-lang.org/?gist=ff310b95a8d057b0f345d88d3794e345&amp;amp;version=nightly\"&gt;https://play.rust-lang.org/?gist=ff310b95a8d057b0f345d88d3794e345&amp;amp;version=nightly&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fn main() {\n    let mut res = Response::new();\n    println!(&amp;quot;{:?}&amp;quot;, res);\n    append_header_vary(&amp;amp;mut res, Ascii::new(&amp;quot;Origin&amp;quot;.to_string()));\n    println!(&amp;quot;{:?}&amp;quot;, res);\n    append_header_vary(&amp;amp;mut res, Ascii::new(&amp;quot;Accept-Encoding&amp;quot;.to_string()));\n    println!(&amp;quot;{:?}&amp;quot;, res);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Response { status: Ok, version: Http11, headers: {} }\nResponse { status: Ok, version: Http11, headers: {&amp;quot;Vary&amp;quot;: &amp;quot;Origin&amp;quot;} }\nResponse { status: Ok, version: Http11, headers: {&amp;quot;Vary&amp;quot;: &amp;quot;Origin, Accept-Encoding&amp;quot;} }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Is there a more concise implementation of my &lt;code&gt;append_header_vary&lt;/code&gt; function? &lt;/p&gt;\n\n&lt;p&gt;For example, I couldn&amp;#39;t seem to contain all the logic inside the &lt;code&gt;match&lt;/code&gt; block because headers is borrowed mutably yet I can&amp;#39;t access it in my final case.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "This seems like a specific question, but it's an example of code I run into a lot.\n\nHere, I implement a function `append_header_vary(&amp;mut response, \"Origin\")` that sets the response's Vary header to \"Origin\" if it doesn't exist. Else, it appends \"Origin\" to the Vary header's array.\n\nThis demo is runnable: https://play.rust-lang.org/?gist=ff310b95a8d057b0f345d88d3794e345&amp;version=nightly\n\n    fn main() {\n        let mut res = Response::new();\n        println!(\"{:?}\", res);\n        append_header_vary(&amp;mut res, Ascii::new(\"Origin\".to_string()));\n        println!(\"{:?}\", res);\n        append_header_vary(&amp;mut res, Ascii::new(\"Accept-Encoding\".to_string()));\n        println!(\"{:?}\", res);\n    }\n\nOutput:\n\n    Response { status: Ok, version: Http11, headers: {} }\n    Response { status: Ok, version: Http11, headers: {\"Vary\": \"Origin\"} }\n    Response { status: Ok, version: Http11, headers: {\"Vary\": \"Origin, Accept-Encoding\"} }\n\nIs there a more concise implementation of my `append_header_vary` function? \n\nFor example, I couldn't seem to contain all the logic inside the `match` block because headers is borrowed mutably yet I can't access it in my final case.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85n6u3", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "planetary_pelt", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 3, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.rust", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": true, "parent_whitelist_status": "all_ads", "name": "t3_85n6u3", "spoiler": false, "permalink": "/r/rust/comments/85n6u3/best_way_to_implement_this_sort_of_nested/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521523386.0, "url": "https://www.reddit.com/r/rust/comments/85n6u3/best_way_to_implement_this_sort_of_nested/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 35351, "created_utc": 1521494586.0, "subreddit_name_prefixed": "r/rust", "ups": 3, "media": null, "num_comments": 1, "title": "Best way to implement this sort of nested mutation? (`response.headers_mut().get_mut()`)", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "rust", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85mvsa", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "aturon", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 36, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "aturon.github.io", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "core", "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": "rust", "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_85mvsa", "spoiler": false, "permalink": "/r/rust/comments/85mvsa/putting_bors_on_a_pip/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521521033.0, "url": "http://aturon.github.io/2018/03/19/bors/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 35351, "created_utc": 1521492233.0, "subreddit_name_prefixed": "r/rust", "ups": 36, "media": null, "num_comments": 8, "title": "Putting bors on a PIP", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "rust", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85gvze", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "richox_16777216", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 9, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "github.com", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_85gvze", "spoiler": false, "permalink": "/r/rust/comments/85gvze/an_optimized_rolz_datacompressor_written_in_rust/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521462524.0, "url": "http://github.com/richox/orz", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 35351, "created_utc": 1521433724.0, "subreddit_name_prefixed": "r/rust", "ups": 9, "media": null, "num_comments": 1, "title": "an optimized ROLZ data-compressor written in rust", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "rust", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;(Posted on Twitter a while back, but cross-posting here out of public interest.)&lt;/p&gt;\n\n&lt;p&gt;I wrote an old MSDOS intro about 20 years ago, with some simple graphics and a .mod file playing in the background (which was quite advanced at the time - remember MSDOS didn&amp;#39;t have any multi-tasking built in.) My brother sent me the old .exe file a while ago. Just for the sake of it, I rewrote it with Rust and WebAssembly, using a Javascript-based .mod player. Enjoy! ;)&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://perlun.eu.org/en/programming/gameland/\"&gt;http://perlun.eu.org/en/programming/gameland/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;(You will find a YouTube video there with the original MSDOS version as well, so you can compare. Bonus points for those who find the subtle difference(s).)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "(Posted on Twitter a while back, but cross-posting here out of public interest.)\n\nI wrote an old MSDOS intro about 20 years ago, with some simple graphics and a .mod file playing in the background (which was quite advanced at the time - remember MSDOS didn't have any multi-tasking built in.) My brother sent me the old .exe file a while ago. Just for the sake of it, I rewrote it with Rust and WebAssembly, using a Javascript-based .mod player. Enjoy! ;)\n\nhttp://perlun.eu.org/en/programming/gameland/\n\n(You will find a YouTube video there with the original MSDOS version as well, so you can compare. Bonus points for those who find the subtle difference(s).)", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85d6a1", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "perlun", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 7, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.rust", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": true, "parent_whitelist_status": "all_ads", "name": "t3_85d6a1", "spoiler": false, "permalink": "/r/rust/comments/85d6a1/gameland_msdos_intro_rewritten_in_rust_for/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521427324.0, "url": "https://www.reddit.com/r/rust/comments/85d6a1/gameland_msdos_intro_rewritten_in_rust_for/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 35351, "created_utc": 1521398524.0, "subreddit_name_prefixed": "r/rust", "ups": 7, "media": null, "num_comments": 0, "title": "Gameland MSDOS intro rewritten in Rust for WebAssembly", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "send_replies": false, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "rust", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85l77d", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "dochtman", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 20, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "blog.servo.org", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": "Askama", "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_85l77d", "spoiler": false, "permalink": "/r/rust/comments/85l77d/this_week_in_servo_108/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521508730.0, "url": "https://blog.servo.org/2018/03/19/twis-108/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 35351, "created_utc": 1521479930.0, "subreddit_name_prefixed": "r/rust", "ups": 20, "media": null, "num_comments": 0, "title": "This Week in Servo 108", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "rust", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m working on an implementation of an actor model as a part of an OS I&amp;#39;m working on. Currently my scheduler has an array of actors/objects and They&amp;#39;re identified by an index into this array. Since arrays need to be homogenous, I&amp;#39;m forced to put them in trait objects.&lt;/p&gt;\n\n&lt;p&gt;My message passing mechanism is intended to be asynchronous with callbacks once the data is received. Since each object should never be run in 2 threads at the same time, it would alleviate the need for locks outside the scheduler. The problem is that I&amp;#39;d like to pass a reference to the current object to the callback (because I can&amp;#39;t just pass a mutable reference to multiple callbacks as a closure), however this would require downcasting from a trait object to a concrete type.&lt;/p&gt;\n\n&lt;p&gt;How would I do this or what could be some alternative solutions?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I'm working on an implementation of an actor model as a part of an OS I'm working on. Currently my scheduler has an array of actors/objects and They're identified by an index into this array. Since arrays need to be homogenous, I'm forced to put them in trait objects.\n\nMy message passing mechanism is intended to be asynchronous with callbacks once the data is received. Since each object should never be run in 2 threads at the same time, it would alleviate the need for locks outside the scheduler. The problem is that I'd like to pass a reference to the current object to the callback (because I can't just pass a mutable reference to multiple callbacks as a closure), however this would require downcasting from a trait object to a concrete type.\n\nHow would I do this or what could be some alternative solutions?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85ki2p", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "boomshroom", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 5, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.rust", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": true, "parent_whitelist_status": "all_ads", "name": "t3_85ki2p", "spoiler": false, "permalink": "/r/rust/comments/85ki2p/downcasting_a_trait_object/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521503603.0, "url": "https://www.reddit.com/r/rust/comments/85ki2p/downcasting_a_trait_object/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 35351, "created_utc": 1521474803.0, "subreddit_name_prefixed": "r/rust", "ups": 5, "media": null, "num_comments": 4, "title": "Downcasting a trait object?", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "rust", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Having seen &lt;a href=\"https://www.reddit.com/r/rust/comments/85j62r/libuirs_revival/\"&gt;this post&lt;/a&gt; I was wondering, how hard would it be to make Rust bindings &lt;a href=\"https://github.com/lc-soft/LCUI\"&gt;LCUI&lt;/a&gt;. I ask because I think it might be interesting, being able to build a UI aesthetic using css allows you to use things like bootstrap, like in this &lt;a href=\"https://github.com/lc-ui/lcui.css\"&gt;component library&lt;/a&gt;, though I&amp;#39;m not a fan of bootstrap in of itself. \nI like the idea of using a css framework I do like and building a UI library using it. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Having seen [this post](https://www.reddit.com/r/rust/comments/85j62r/libuirs_revival/) I was wondering, how hard would it be to make Rust bindings [LCUI](https://github.com/lc-soft/LCUI). I ask because I think it might be interesting, being able to build a UI aesthetic using css allows you to use things like bootstrap, like in this [component library](https://github.com/lc-ui/lcui.css), though I'm not a fan of bootstrap in of itself. \nI like the idea of using a css framework I do like and building a UI library using it. ", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85kf4p", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "Thermatix", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 9, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.rust", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": true, "parent_whitelist_status": "all_ads", "name": "t3_85kf4p", "spoiler": false, "permalink": "/r/rust/comments/85kf4p/lcui_rust_bindings/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521502965.0, "url": "https://www.reddit.com/r/rust/comments/85kf4p/lcui_rust_bindings/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 35351, "created_utc": 1521474165.0, "subreddit_name_prefixed": "r/rust", "ups": 9, "media": null, "num_comments": 1, "title": "LCUI rust bindings?", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "rust", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85k3dn", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "dochtman", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 21, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "mozillagfx.wordpress.com", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": "Askama", "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_85k3dn", "spoiler": false, "permalink": "/r/rust/comments/85k3dn/webrender_newsletter_16/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521500329.0, "url": "https://mozillagfx.wordpress.com/2018/03/19/webrender-newsletter-16/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 35351, "created_utc": 1521471529.0, "subreddit_name_prefixed": "r/rust", "ups": 21, "media": null, "num_comments": 14, "title": "WebRender newsletter #16", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "rust", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m trying to recursively go through a complex hashmap and then add a value to one of the inner hashmaps.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://play.rust-lang.org/?gist=5a77253b3d3ccdd028901f7b79da3515&amp;amp;version=stable\"&gt;Playground Link&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve created something similar for a &lt;code&gt;get_value&lt;/code&gt; function and it works, but that is probably because its immutable all throughout. Here I want to use &lt;code&gt;.insert&lt;/code&gt; so at one point I need to borrow a mutable reference.&lt;/p&gt;\n\n&lt;p&gt;Some fake code to show what I&amp;#39;m trying to do.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let mut A = HashMap::new();\nlet mut B = HashMap::new();\nlet C = HashMap::new();\n\nB.insert(&amp;quot;c&amp;quot;,C);\nA.insert(&amp;quot;b&amp;quot;,B);\n\nlet mut refer = &amp;amp;A;\n\nif let Some(ref b) = refer.get(&amp;quot;b&amp;quot;) {  *refer = b;  }\nif let Some(ref c) = refer.get(&amp;quot;c&amp;quot;) {  *refer = c;  }\n\nrefer.insert(&amp;quot;char&amp;quot;,&amp;quot;otherthing&amp;quot;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;`&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I'm trying to recursively go through a complex hashmap and then add a value to one of the inner hashmaps.\n\n[Playground Link](https://play.rust-lang.org/?gist=5a77253b3d3ccdd028901f7b79da3515&amp;version=stable)\n\nI've created something similar for a `get_value` function and it works, but that is probably because its immutable all throughout. Here I want to use `.insert` so at one point I need to borrow a mutable reference.\n\nSome fake code to show what I'm trying to do.\n\n    let mut A = HashMap::new();\n    let mut B = HashMap::new();\n    let C = HashMap::new();\n   \n    B.insert(\"c\",C);\n    A.insert(\"b\",B);\n\n    let mut refer = &amp;A;\n\n    if let Some(ref b) = refer.get(\"b\") {  *refer = b;  }\n    if let Some(ref c) = refer.get(\"c\") {  *refer = c;  }\n\n    refer.insert(\"char\",\"otherthing\");\n`", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85ju5b", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "snsvrno", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 8, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.rust", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": true, "parent_whitelist_status": "all_ads", "name": "t3_85ju5b", "spoiler": false, "permalink": "/r/rust/comments/85ju5b/how_to_get_a_mutable_pointer/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521498267.0, "url": "https://www.reddit.com/r/rust/comments/85ju5b/how_to_get_a_mutable_pointer/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 35351, "created_utc": 1521469467.0, "subreddit_name_prefixed": "r/rust", "ups": 8, "media": null, "num_comments": 12, "title": "How to get a mutable pointer?", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "rust", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85j7gn", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "mre__", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 142, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "youtube.com", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_85j7gn", "spoiler": false, "permalink": "/r/rust/comments/85j7gn/announcing_hello_rust/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521492553.0, "url": "https://www.youtube.com/channel/UCZ_EWaQZCZuGGfnuqUoHujw", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 35351, "created_utc": 1521463753.0, "subreddit_name_prefixed": "r/rust", "ups": 142, "media": null, "num_comments": 16, "title": "Announcing \"Hello Rust!\"", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "rust", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/andlabs/libui\"&gt;libui&lt;/a&gt; has shown some activity again and it made be realize that Patrick&amp;#39;s &lt;a href=\"https://github.com/pcwalton/libui-rs\"&gt;original bindings&lt;/a&gt; had quite some forks, of which 3 are still active:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/masche842/libui-rs\"&gt;https://github.com/masche842/libui-rs&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/davidkna/libui-rs\"&gt;https://github.com/davidkna/libui-rs&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/LeoTindall/libui-rs\"&gt;https://github.com/LeoTindall/libui-rs&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Even though i can&amp;#39;t offer any time myself, i&amp;#39;d like to express my appreciation for these efforts and hope for some shared work.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "[libui](https://github.com/andlabs/libui) has shown some activity again and it made be realize that Patrick's [original bindings](https://github.com/pcwalton/libui-rs) had quite some forks, of which 3 are still active:\n\n* https://github.com/masche842/libui-rs\n* https://github.com/davidkna/libui-rs\n* https://github.com/LeoTindall/libui-rs\n\nEven though i can't offer any time myself, i'd like to express my appreciation for these efforts and hope for some shared work.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85j62r", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "rustcvswvj", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 47, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.rust", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": true, "parent_whitelist_status": "all_ads", "name": "t3_85j62r", "spoiler": false, "permalink": "/r/rust/comments/85j62r/libuirs_revival/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521492188.0, "url": "https://www.reddit.com/r/rust/comments/85j62r/libuirs_revival/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 35351, "created_utc": 1521463388.0, "subreddit_name_prefixed": "r/rust", "ups": 47, "media": null, "num_comments": 3, "title": "libui(-rs) revival?", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "rust", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85ib5g", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "Aspirin_Park", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 15, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "pingcap.com", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_85ib5g", "spoiler": false, "permalink": "/r/rust/comments/85ib5g/this_week_in_tikv_mar_12_to_mar_18/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521482278.0, "url": "https://pingcap.com/weekly/2018-03-19-tidb-weekly/#weekly-update-in-tikv-and-pd", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 35351, "created_utc": 1521453478.0, "subreddit_name_prefixed": "r/rust", "ups": 15, "media": null, "num_comments": 0, "title": "This week in TiKV (Mar. 12 to Mar. 18)", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "rust", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I saw &lt;a href=\"https://www.phoronix.com/scan.php?page=news_item&amp;amp;px=XArrays-Possibly-For-Linux-4.17\"&gt;this article on Phoronix&lt;/a&gt; that mentions a data structure called XArrays(extensible Arrays). It&amp;#39;s described as:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;The XArray is an abstract data type which behaves like a very large array of pointers. It meets many of the same needs as a hash or a conventional resizable array. Unlike a hash, it allows you to sensibly go to the next or previous entry in a cache-efficient manner. In contrast to a resizable array, there is no need for copying data or changing MMU mappings in order to grow the array. It is more memory-efficient, parallelisable and cache friendly than a doubly-linked list. It takes advantage of RCU to perform lookups without locking.&lt;/p&gt;\n\n&lt;p&gt;The XArray implementation is efficient when the indices used are densely clustered; hashing the object and using the hash as the index will not perform well. The XArray is optimised for small indices, but still has good performance with large indices. If your index can be larger than ULONG_MAX then the XArray is not the data type for you. The most important user of the XArray is the page cache.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;What is the Rust equivalent for that? Is there a crate that provides this kind of data structure? I&amp;#39;m not sure what &amp;quot;small&amp;quot; would be, and according the above it&amp;#39;s mostly useful for using as a cache like LRU?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I saw [this article on Phoronix](https://www.phoronix.com/scan.php?page=news_item&amp;px=XArrays-Possibly-For-Linux-4.17) that mentions a data structure called XArrays(extensible Arrays). It's described as:\n\n&gt; The XArray is an abstract data type which behaves like a very large array of pointers. It meets many of the same needs as a hash or a conventional resizable array. Unlike a hash, it allows you to sensibly go to the next or previous entry in a cache-efficient manner. In contrast to a resizable array, there is no need for copying data or changing MMU mappings in order to grow the array. It is more memory-efficient, parallelisable and cache friendly than a doubly-linked list. It takes advantage of RCU to perform lookups without locking.\n&gt; \n&gt; The XArray implementation is efficient when the indices used are densely clustered; hashing the object and using the hash as the index will not perform well. The XArray is optimised for small indices, but still has good performance with large indices. If your index can be larger than ULONG_MAX then the XArray is not the data type for you. The most important user of the XArray is the page cache.\n\nWhat is the Rust equivalent for that? Is there a crate that provides this kind of data structure? I'm not sure what \"small\" would be, and according the above it's mostly useful for using as a cache like LRU?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85i0jz", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "kwhali", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 19, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.rust", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": true, "parent_whitelist_status": "all_ads", "name": "t3_85i0jz", "spoiler": false, "permalink": "/r/rust/comments/85i0jz/xarrays/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521477949.0, "url": "https://www.reddit.com/r/rust/comments/85i0jz/xarrays/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 35351, "created_utc": 1521449149.0, "subreddit_name_prefixed": "r/rust", "ups": 19, "media": null, "num_comments": 13, "title": "XArrays?", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "rust", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;New week, new Rust! What are you folks up to? Answer here or over at &lt;a href=\"https://users.rust-lang.org/t/whats-everyone-working-on-this-week-12-2018/16288?u=llogiq\"&gt;rust-users&lt;/a&gt;!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "New week, new Rust! What are you folks up to? Answer here or over at [rust-users] (https://users.rust-lang.org/t/whats-everyone-working-on-this-week-12-2018/16288?u=llogiq)!", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85heje", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "llogiq", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 27, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.rust", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "contrib", "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": "clippy \u00b7 twir \u00b7 rust \u00b7 flamer \u00b7 overflower \u00b7 bytecount", "stickied": true, "visited": false, "can_gild": false, "is_self": true, "parent_whitelist_status": "all_ads", "name": "t3_85heje", "spoiler": false, "permalink": "/r/rust/comments/85heje/whats_everyone_working_on_this_week_122018/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521469121.0, "url": "https://www.reddit.com/r/rust/comments/85heje/whats_everyone_working_on_this_week_122018/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 35351, "created_utc": 1521440321.0, "subreddit_name_prefixed": "r/rust", "ups": 27, "media": null, "num_comments": 30, "title": "What's everyone working on this week (12/2018)?", "mod_note": null, "is_video": false, "distinguished": "moderator"}}, {"kind": "t3", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "rust", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85heio", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "sanxiyn", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 8, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "github.com", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "super", "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": "rust", "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_85heio", "spoiler": false, "permalink": "/r/rust/comments/85heio/ssh_permit_a38_central_managment_and_deployment/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521469113.0, "url": "https://github.com/ierror/ssh-permit-a38", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 35351, "created_utc": 1521440313.0, "subreddit_name_prefixed": "r/rust", "ups": 8, "media": null, "num_comments": 2, "title": "SSH Permit A38: Central managment and deployment for SSH keys", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "rust", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Mystified about strings? Borrow checker have you in a headlock? Seek help here! There are no stupid questions, only docs that haven&amp;#39;t been written yet.&lt;/p&gt;\n\n&lt;p&gt;If you have a &lt;a href=\"http://stackoverflow.com/\"&gt;StackOverflow&lt;/a&gt; account, consider asking it there instead! StackOverflow shows up much higher in search results, so having your question there also helps future Rust users (be sure to give it &lt;a href=\"http://stackoverflow.com/questions/tagged/rust\"&gt;the &amp;quot;Rust&amp;quot; tag&lt;/a&gt; for maximum visibility). Note that this site is very interested in question quality. I&amp;#39;ve been asked to read a RFC I authored once.&lt;/p&gt;\n\n&lt;p&gt;Here are some other venues where help may be found:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"/r/learnrust\"&gt;/r/learnrust&lt;/a&gt; is a subreddit to share your questions and epiphanies learning Rust programming.&lt;/p&gt;\n\n&lt;p&gt;The official Rust user forums: &lt;a href=\"https://users.rust-lang.org/\"&gt;https://users.rust-lang.org/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The Rust-related IRC channels on irc.mozilla.org (click the links to open a web-based IRC client):&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;  &lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23rust\"&gt;#rust&lt;/a&gt; (general questions)&lt;/li&gt;\n&lt;li&gt;  &lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23rust-beginners\"&gt;#rust-beginners&lt;/a&gt; (beginner questions)&lt;/li&gt;\n&lt;li&gt;  &lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23cargo\"&gt;#cargo&lt;/a&gt; (the package manager)&lt;/li&gt;\n&lt;li&gt;  &lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23rust-gamedev\"&gt;#rust-gamedev&lt;/a&gt; (graphics and video games, and see also &lt;a href=\"/r/rust_gamedev\"&gt;/r/rust_gamedev&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;  &lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23rust-osdev\"&gt;#rust-osdev&lt;/a&gt; (operating systems and embedded systems)&lt;/li&gt;\n&lt;li&gt;  &lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23rust-webdev\"&gt;#rust-webdev&lt;/a&gt; (web development)&lt;/li&gt;\n&lt;li&gt;  &lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23rust-gamedev\"&gt;#rust-networking&lt;/a&gt; (computer networking, and see also &lt;a href=\"/r/rust_networking\"&gt;/r/rust_networking&lt;/a&gt;)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Also check out &lt;a href=\"https://www.reddit.com/r/rust/comments/83sy0s/hey_rustaceans_got_an_easy_question_ask_here\"&gt;last week&amp;#39;s thread&lt;/a&gt; with many good questions and answers. And if you believe your question to be either very complex or worthy of larger dissemination, feel free to create a text post.&lt;/p&gt;\n\n&lt;p&gt;If you want to be mentored by experienced Rustaceans, please tell us the area of expertise that you seek.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Mystified about strings? Borrow checker have you in a headlock? Seek help here! There are no stupid questions, only docs that haven't been written yet.\n\nIf you have a [StackOverflow](http://stackoverflow.com/) account, consider asking it there instead! StackOverflow shows up much higher in search results, so having your question there also helps future Rust users (be sure to give it [the \"Rust\" tag](http://stackoverflow.com/questions/tagged/rust) for maximum visibility). Note that this site is very interested in question quality. I've been asked to read a RFC I authored once.\n\nHere are some other venues where help may be found:\n\n/r/learnrust is a subreddit to share your questions and epiphanies learning Rust programming.\n\nThe official Rust user forums: [https://users.rust-lang.org/](https://users.rust-lang.org/)\n\nThe Rust-related IRC channels on irc.mozilla.org (click the links to open a web-based IRC client):\n\n*   [#rust](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23rust) (general questions)\n*   [#rust-beginners](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23rust-beginners) (beginner questions)\n*   [#cargo](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23cargo) (the package manager)\n*   [#rust-gamedev](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23rust-gamedev) (graphics and video games, and see also [/r/rust_gamedev](/r/rust_gamedev))\n*   [#rust-osdev](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23rust-osdev) (operating systems and embedded systems)\n*   [#rust-webdev](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23rust-webdev) (web development)\n*   [#rust-networking](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23rust-gamedev) (computer networking, and see also [/r/rust_networking](/r/rust_networking))\n\nAlso check out [last week's thread](https://www.reddit.com/r/rust/comments/83sy0s/hey_rustaceans_got_an_easy_question_ask_here) with many good questions and answers. And if you believe your question to be either very complex or worthy of larger dissemination, feel free to create a text post.\n\nIf you want to be mentored by experienced Rustaceans, please tell us the area of expertise that you seek.", "likes": null, "suggested_sort": "new", "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85he4j", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "llogiq", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 19, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.rust", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "contrib", "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": "clippy \u00b7 twir \u00b7 rust \u00b7 flamer \u00b7 overflower \u00b7 bytecount", "stickied": true, "visited": false, "can_gild": false, "is_self": true, "parent_whitelist_status": "all_ads", "name": "t3_85he4j", "spoiler": false, "permalink": "/r/rust/comments/85he4j/hey_rustaceans_got_an_easy_question_ask_here/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521468969.0, "url": "https://www.reddit.com/r/rust/comments/85he4j/hey_rustaceans_got_an_easy_question_ask_here/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 35351, "created_utc": 1521440169.0, "subreddit_name_prefixed": "r/rust", "ups": 19, "media": null, "num_comments": 24, "title": "Hey Rustaceans! Got an easy question? Ask here (12/2018)!", "mod_note": null, "is_video": false, "distinguished": "moderator"}}, {"kind": "t3", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "rust", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85h9nf", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "entoros", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 73, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "willcrichton.net", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_85h9nf", "spoiler": false, "permalink": "/r/rust/comments/85h9nf/typedirected_metaprogramming_in_rust/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521467298.0, "url": "http://willcrichton.net/notes/type-directed-metaprogramming-in-rust/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 35351, "created_utc": 1521438498.0, "subreddit_name_prefixed": "r/rust", "ups": 73, "media": null, "num_comments": 5, "title": "Type-directed metaprogramming in Rust", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "rust", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://play.rust-lang.org/?gist=2e50fe7f419bbdf125bf6a97a7bca4ad&amp;amp;version=stable\"&gt;playground&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Essentially I need to somehow call &lt;code&gt;Well::get()&lt;/code&gt; from &lt;code&gt;Tile::flood()&lt;/code&gt;,\nbut I don&amp;#39;t see any way to do that.&lt;br/&gt;\nAny help would be appreciated&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "[playground](https://play.rust-lang.org/?gist=2e50fe7f419bbdf125bf6a97a7bca4ad&amp;version=stable)\n\nEssentially I need to somehow call `Well::get()` from `Tile::flood()`,\nbut I don't see any way to do that.  \nAny help would be appreciated\n", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85eqg1", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "fahradir", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 11, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.rust", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": true, "parent_whitelist_status": "all_ads", "name": "t3_85eqg1", "spoiler": false, "permalink": "/r/rust/comments/85eqg1/i_need_help_with_the_borrowchecker/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521440832.0, "url": "https://www.reddit.com/r/rust/comments/85eqg1/i_need_help_with_the_borrowchecker/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 35351, "created_utc": 1521412032.0, "subreddit_name_prefixed": "r/rust", "ups": 11, "media": null, "num_comments": 3, "title": "I need help with the Borrowchecker", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "send_replies": false, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "rust", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The &lt;code&gt;?&lt;/code&gt; operator and the &lt;code&gt;try!&lt;/code&gt; macro appear to be really clever ways to avoid verbose match expressions, but so far I&amp;#39;m confused as to how they are meant to work in a function with multiple types of errors. How do people get around this? I&amp;#39;m guessing that either there is some way to combine multiple error types, or that &lt;code&gt;?&lt;/code&gt; is a very niche operator.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "The `?` operator and the `try!` macro appear to be really clever ways to avoid verbose match expressions, but so far I'm confused as to how they are meant to work in a function with multiple types of errors. How do people get around this? I'm guessing that either there is some way to combine multiple error types, or that `?` is a very niche operator.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85ebwk", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "FullTimeVirgin", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 14, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.rust", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": true, "parent_whitelist_status": "all_ads", "name": "t3_85ebwk", "spoiler": false, "permalink": "/r/rust/comments/85ebwk/any_tips_on_handling_multiple_error_types_in_rust/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521437232.0, "url": "https://www.reddit.com/r/rust/comments/85ebwk/any_tips_on_handling_multiple_error_types_in_rust/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 35351, "created_utc": 1521408432.0, "subreddit_name_prefixed": "r/rust", "ups": 14, "media": null, "num_comments": 15, "title": "Any tips on handling multiple error types in Rust?", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "rust", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85di0x", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "PalatableReindeer", "num_crossposts": 1, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 89, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "github.com", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_85di0x", "spoiler": false, "permalink": "/r/rust/comments/85di0x/kernelroulette_a_kernel_module_written_in_rust/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521430109.0, "url": "https://github.com/souvik1997/kernel-roulette", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 35351, "created_utc": 1521401309.0, "subreddit_name_prefixed": "r/rust", "ups": 89, "media": null, "num_comments": 3, "title": "kernel-roulette: A kernel module written in Rust", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "rust", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85dg9u", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "light3rn", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 13, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "github.com", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_85dg9u", "spoiler": false, "permalink": "/r/rust/comments/85dg9u/my_first_little_rust_programs_musicians_wake_up/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521429692.0, "url": "https://github.com/lightern/rust/tree/master/binaries", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 35351, "created_utc": 1521400892.0, "subreddit_name_prefixed": "r/rust", "ups": 13, "media": null, "num_comments": 10, "title": "My first little Rust programs! Musicians wake up :)", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "rust", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Example&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;fn main() {\n    let x = 5;\n    let y = 13.0;\n\n    println!(&amp;quot;Test {}&amp;quot;, x * y)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The error message for this is:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    error[E0277]: the trait bound `{integer}: std::ops::Mul&amp;lt;{float}&amp;gt;` is not satisfied\n     --&amp;gt; src/main.rs:5:24\n      |\n    5 |  println!(&amp;quot;Test {}&amp;quot;, x * y)\n      |                        ^ no implementation for `{integer} * {float}`\n      |\n      = help: the trait `std::ops::Mul&amp;lt;{float}&amp;gt;` is not implemented for `{integer}`\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is a very common type error that everybody will make at some point, and is the prime example I have found on how these error messages could be improved.&lt;/p&gt;\n\n&lt;h1&gt;Error message doesn&amp;#39;t accurately reflect the mistake made.&lt;/h1&gt;\n\n&lt;p&gt;If you were to go by the lines &lt;code&gt;error[E0277]: the trait bound `{integer}: std::ops::Mul&amp;lt;{float}&amp;gt;` is not satisfied&lt;/code&gt; and &lt;code&gt;help: the trait `std::ops::Mul&amp;lt;{float}&amp;gt;` is not implemented for `{integer}`&lt;/code&gt; and &lt;code&gt;no implementation for `{integer} * {float}`&lt;/code&gt; you might think that the fix to the problem is that you need to implement &lt;code&gt;std::ops::Mul&amp;lt;float&amp;gt;&lt;/code&gt; for integer * float. This is of course incorrect. The correct information (that you have a local type error) is inferred.&lt;/p&gt;\n\n&lt;p&gt;The common case, that you have a local type error, should be present in the error text instead: &lt;code&gt;error: cannot multiply integer * float&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Then in the rare case, that you actually are missing a trait implementation, you infer that from the common error message.&lt;/p&gt;\n\n&lt;h1&gt;There are circular dependencies on concepts.&lt;/h1&gt;\n\n&lt;p&gt;When people learn anything, they have to do it one step at a time. But in order to read this error as it is, you need to understand traits, and to understand traits you need to understand generics. These are both much more advanced concepts than a simple type error.&lt;/p&gt;\n\n&lt;p&gt;This creates a catch 22 where there is no linear path to learning rust. C++ has similar problems where you must understand namespaces, generics, classes and operator overloading just to understand how &lt;code&gt;std::cout &amp;lt;&amp;lt; &amp;quot;Hello World&amp;quot; &amp;lt;&amp;lt; std::endl;&lt;/code&gt; works. But rust should not repeat C++ learning mistakes.&lt;/p&gt;\n\n&lt;p&gt;People who already understand more of rust may not be able to even identify this learning problem as it&amp;#39;s no longer their problem. But this is also closely related to issue 1 anyway. Every error message that rustc prints should ideally only reference the specific concept that is in use by that error message.&lt;/p&gt;\n\n&lt;h1&gt;The information density is really low.&lt;/h1&gt;\n\n&lt;p&gt;Every section of this three part error message tries to say the same thing in a different way, which makes the error messages really inefficient to read at a glance. I&amp;#39;m an old C++ coder, and the only thing I care about now in my C++ errors is the file and line number. Once you have full rust knowledge I would also assume you get to that level. But that information is still obscurely hidden in the middle. &lt;code&gt;--&amp;gt; src/main.rs:5:24&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;IMO rustc needs a single-line error message format out of the box.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Example\n\n    fn main() {\n        let x = 5;\n        let y = 13.0;\n     \n        println!(\"Test {}\", x * y)\n    }\n\nThe error message for this is:\n\n        error[E0277]: the trait bound `{integer}: std::ops::Mul&lt;{float}&gt;` is not satisfied\n         --&gt; src/main.rs:5:24\n          |\n        5 |  println!(\"Test {}\", x * y)\n          |                        ^ no implementation for `{integer} * {float}`\n          |\n          = help: the trait `std::ops::Mul&lt;{float}&gt;` is not implemented for `{integer}`\n\nThis is a very common type error that everybody will make at some point, and is the prime example I have found on how these error messages could be improved.\n\n# Error message doesn't accurately reflect the mistake made.\n\nIf you were to go by the lines ```error[E0277]: the trait bound `{integer}: std::ops::Mul&lt;{float}&gt;` is not satisfied``` and ```help: the trait `std::ops::Mul&lt;{float}&gt;` is not implemented for `{integer}` ``` and ```no implementation for `{integer} * {float}` ``` you might think that the fix to the problem is that you need to implement `std::ops::Mul&lt;float&gt;` for integer * float. This is of course incorrect. The correct information (that you have a local type error) is inferred.\n\nThe common case, that you have a local type error, should be present in the error text instead: `error: cannot multiply integer * float`.\n\nThen in the rare case, that you actually are missing a trait implementation, you infer that from the common error message.\n\n# There are circular dependencies on concepts.\n\nWhen people learn anything, they have to do it one step at a time. But in order to read this error as it is, you need to understand traits, and to understand traits you need to understand generics. These are both much more advanced concepts than a simple type error.\n\nThis creates a catch 22 where there is no linear path to learning rust. C++ has similar problems where you must understand namespaces, generics, classes and operator overloading just to understand how `std::cout &lt;&lt; \"Hello World\" &lt;&lt; std::endl;` works. But rust should not repeat C++ learning mistakes.\n\nPeople who already understand more of rust may not be able to even identify this learning problem as it's no longer their problem. But this is also closely related to issue 1 anyway. Every error message that rustc prints should ideally only reference the specific concept that is in use by that error message.\n\n# The information density is really low. \n\nEvery section of this three part error message tries to say the same thing in a different way, which makes the error messages really inefficient to read at a glance. I'm an old C++ coder, and the only thing I care about now in my C++ errors is the file and line number. Once you have full rust knowledge I would also assume you get to that level. But that information is still obscurely hidden in the middle. `--&gt; src/main.rs:5:24`.\n\nIMO rustc needs a single-line error message format out of the box.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85d6om", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "cheapsexandfastfood", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 39, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.rust", "hidden": false, "thumbnail": "", "edited": 1521398873.0, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": true, "parent_whitelist_status": "all_ads", "name": "t3_85d6om", "spoiler": false, "permalink": "/r/rust/comments/85d6om/suggestions_for_improving_rustcs_error_messages/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521427417.0, "url": "https://www.reddit.com/r/rust/comments/85d6om/suggestions_for_improving_rustcs_error_messages/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 35351, "created_utc": 1521398617.0, "subreddit_name_prefixed": "r/rust", "ups": 39, "media": null, "num_comments": 25, "title": "Suggestions for improving rustc's error messages.", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "rust", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85cvn7", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "bluejekyll", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 79, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "bluejekyll.github.io", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "contrib", "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": "trust-dns", "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_85cvn7", "spoiler": false, "permalink": "/r/rust/comments/85cvn7/multicasting_in_rust/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521424804.0, "url": "https://bluejekyll.github.io/blog/rust/2018/03/18/multicasting-in-rust.html", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 35351, "created_utc": 1521396004.0, "subreddit_name_prefixed": "r/rust", "ups": 79, "media": null, "num_comments": 2, "title": "Multicasting in Rust", "mod_note": null, "is_video": false, "distinguished": null}}], "before": null}}

